import os
from flask import Flask, request
from slackeventsapi import SlackEventAdapter
from slack_sdk import WebClient
import pickle
import faiss
from langchain.vectorstores import FAISS
from langchain.embeddings import OpenAIEmbeddings
from langchain.chains.question_answering import load_qa_chain
from langchain.chat_models import ChatOpenAI
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Set up Flask app
app = Flask(__name__)

# Slack configuration
slack_event_adapter = SlackEventAdapter(
    os.environ['SLACK_SIGNING_SECRET'],
    '/slack/events',
    app
)
slack_client = WebClient(token=os.environ['SLACK_BOT_TOKEN'])
BOT_ID = slack_client.auth_test()['user_id']

# Load FAISS and QA chain
with open("faiss.pkl", "rb") as f:
    vector_store = pickle.load(f)
vector_store.index = faiss.read_index("training.index")

qa_chain = load_qa_chain(
    llm=ChatOpenAI(model_name="gpt-4", temperature=0.2),
    chain_type="stuff"
)

# History tracking
user_histories = {}  # {user_id: [conversation]}

@slack_event_adapter.on('message')
def handle_message(event_data):
    event = event_data['event']
    user = event.get('user')
    text = event.get('text')
    channel = event.get('channel')

    if user != BOT_ID and f"<@{BOT_ID}>" in text:
        query = text.replace(f"<@{BOT_ID}>", "").strip()

        # Retrieve relevant docs
        docs = vector_store.similarity_search(query, k=3)

        # Maintain history
        history = user_histories.get(user, [])
        context_text = "\n".join(history[-3:])  # last 3 interactions if available
        if context_text:
            docs.append(Document(page_content=context_text))

        # Generate answer
        answer = qa_chain.run(input_documents=docs, question=query)

        # Update history
        history.append(f"Q: {query}\nA: {answer}")
        user_histories[user] = history

        # Reply in Slack
        slack_client.chat_postMessage(
            channel=channel,
            text=f"<@{user}> {answer}"
        )

if __name__ == "__main__":
    app.run(port=3000)
